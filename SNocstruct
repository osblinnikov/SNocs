import os.path
import sys
from builder import *

env = prepare_env(ARGUMENTS)

env['scons'] = Environment(
    TESTNORUN = env['TESTNORUN'],
    BUILDERS = {'Test' :  Builder(action = builder_unit_test)},
    TOOLS  = env['TOOLS'],    
    TARGET_ARCH  = env['PLATFORM'],
    MSVC_VERSION = env['MSVC_VERSION'],
    LIBPATH = env['LIBPATH'],
    LIBS = env['LIBS'],
    LINKFLAGS = env['LINKFLAGS'],
    # CC=env['CC'],
    CPPPATH = env['CPPPATH'],
    CPPDEFINES = env['CPPDEFINES'],
    CCFLAGS = env['CCFLAGS'],
    ENV = os.environ
)

verbosity =  int(env['VERBOSE'])
if verbosity == 0:
    env['scons']['CCCOMSTR'] = "Compiling $SOURCES"
    env['scons']['CXXCOMSTR'] = "Compiling $SOURCES"
    env['scons']['LINKCOMSTR'] = "Linking $TARGET"
    env['scons']['ARCOMSTR'] = "Archieving $TARGET"
elif verbosity == 1:
    env['scons']['CCCOMSTR'] = "Compiling $TARGET $SOURCES"
    env['scons']['CXXCOMSTR'] = "Compiling $TARGET $SOURCES"
    env['scons']['LINKCOMSTR'] = "Linking $TARGET $LINKFLAGS"
    env['scons']['ARCOMSTR'] = "Archieving $TARGET $LINKFLAGS"
else:
    Progress('Evaluating $TARGET\n')

        

if env.has_key('CC') and env['CC'] != None:
    env['scons'].Replace(CC=env['CC'])
if env.has_key('LINK') and env['LINK'] != None:
    env['scons'].Replace(LINK=env['LINK'])

env['scons'].AppendENVPath('LD_LIBRARY_PATH', env['INSTALL_LIB_PATH'])
env['scons'].AppendENVPath('PATH', env['INSTALL_LIB_PATH'])
env['scons'].AppendENVPath('PKG_CONFIG_PATH', os.path.join(env['INSTALL_LIB_PATH'],'pkgconfig'))

if env.has_key('QT_DIR_NAME'):
    env['scons'][env['QT_DIR_NAME']] = env['QT_DIR']
    env['scons'].AppendENVPath('PKG_CONFIG_PATH', env['QT_PKG_CONFIG_PATH'])
    env['scons'].Tool(env['QT_TOOL'])
                
# Progress('Evaluating $TARGET\n')
env['scons'].Decider( 'MD5-timestamp' )          # For speed, use timestamps for change, followed by MD5

#--------------------------------------
#           SOLUTION Builders
#--------------------------------------
preparePaths(env)

#start main build
if verbosity > 1:
    print env['SNOCSCRIPT_PATH']
# Export this environment for use by the SNocscript files
Export( 'env' )
SConscript( env['SNOCSCRIPT'] )

#Include crossproject dependencies
dictLaunchedDependencies = {}
if env.get('CROSSPROJECT_DEPENDENCIES')!=None:
    foundNewDependency = 1
    while foundNewDependency == 1:
        foundNewDependency = 0
        for depFullPath in env['CROSSPROJECT_DEPENDENCIES']:
            if depFullPath not in dictLaunchedDependencies:
                foundNewDependency = 1
                env['SNOCSCRIPT'] = os.path.join(depFullPath,'SNocscript.py')
                env['SNOCSCRIPT_PATH'] = os.path.abspath(os.path.dirname(env['SNOCSCRIPT']))
                preparePaths(env)
                #start building dependency
                
                if env['BUILD_ALL'] == '1':
                    if verbosity > 1:
                        print env['SNOCSCRIPT_PATH']
                    SConscript(env['SNOCSCRIPT'])
                dictLaunchedDependencies[depFullPath] = 1
                break

#--------------------------------------
#           Setting scons require()
#--------------------------------------
if env['BUILD_ALL'] == '1':
    for prog in env['APP_DEPENDENCIES']:
        for dep in env['APP_DEPENDENCIES'][prog]:
            # print prog+" depending on "+dep
            if env['APP_BUILD'].has_key(prog) and env['APP_BUILD'].has_key(dep):
                Requires(env['APP_BUILD'][prog], env['APP_BUILD'][dep])

env['INSTALL_ALIASES'].append( env['TEST_ALIASES'] )
Alias('test', env['TEST_ALIASES'])#run when test command provided in command line
Alias('install', env['INSTALL_ALIASES'])#run when install command provided in command line
